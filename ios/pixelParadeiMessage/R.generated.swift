////
//// This is a generated file, do not edit!
//// Generated by R.swift, see https://github.com/mac-cain13/R.swift
////
//
//import Foundation
////import Rswift
//import UIKit
//
///// This `R` struct is generated and contains references to static resources.
//struct R: Rswift.Validatable {
//  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
//  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
//  
//  static func validate() throws {
//    try font.validate()
//    try intern.validate()
//  }
//  
//  /// This `R.file` struct is generated, and contains static references to 1 files.
//  struct file {
//    /// Resource file `GoogleService-Info.plist`.
//    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
//    
//    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
//    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
//      let fileResource = R.file.googleServiceInfoPlist
//      return fileResource.bundle.url(forResource: fileResource)
//    }
//    
//    fileprivate init() {}
//  }
//  
//  /// This `R.font` struct is generated, and contains static references to 15 fonts.
//  struct font: Rswift.Validatable {
//    /// Font `SFUIDisplay-Bold`.
//    static let sfuiDisplayBold = Rswift.FontResource(fontName: "SFUIDisplay-Bold")
//    /// Font `SFUIDisplay-Heavy`.
//    static let sfuiDisplayHeavy = Rswift.FontResource(fontName: "SFUIDisplay-Heavy")
//    /// Font `SFUIDisplay-Light`.
//    static let sfuiDisplayLight = Rswift.FontResource(fontName: "SFUIDisplay-Light")
//    /// Font `SFUIDisplay-Medium`.
//    static let sfuiDisplayMedium = Rswift.FontResource(fontName: "SFUIDisplay-Medium")
//    /// Font `SFUIDisplay-Regular`.
//    static let sfuiDisplayRegular = Rswift.FontResource(fontName: "SFUIDisplay-Regular")
//    /// Font `SFUIDisplay-Semibold`.
//    static let sfuiDisplaySemibold = Rswift.FontResource(fontName: "SFUIDisplay-Semibold")
//    /// Font `SFUIDisplay-Thin`.
//    static let sfuiDisplayThin = Rswift.FontResource(fontName: "SFUIDisplay-Thin")
//    /// Font `SFUIText-Bold`.
//    static let sfuiTextBold = Rswift.FontResource(fontName: "SFUIText-Bold")
//    /// Font `SFUIText-Heavy`.
//    static let sfuiTextHeavy = Rswift.FontResource(fontName: "SFUIText-Heavy")
//    /// Font `SFUIText-Light`.
//    static let sfuiTextLight = Rswift.FontResource(fontName: "SFUIText-Light")
//    /// Font `SFUIText-Medium`.
//    static let sfuiTextMedium = Rswift.FontResource(fontName: "SFUIText-Medium")
//    /// Font `SFUIText-Regular`.
//    static let sfuiTextRegular = Rswift.FontResource(fontName: "SFUIText-Regular")
//    /// Font `SFUIText-Semibold`.
//    static let sfuiTextSemibold = Rswift.FontResource(fontName: "SFUIText-Semibold")
//    /// Font `SFUIText-Ultrathin`.
//    static let sfuiTextUltrathin = Rswift.FontResource(fontName: "SFUIText-Ultrathin")
//    /// Font `VarelaRound-Regular`.
//    static let varelaRoundRegular = Rswift.FontResource(fontName: "VarelaRound-Regular")
//    
//    /// `UIFont(name: "SFUIDisplay-Bold", size: ...)`
//    static func sfuiDisplayBold(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiDisplayBold, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIDisplay-Heavy", size: ...)`
//    static func sfuiDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiDisplayHeavy, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIDisplay-Light", size: ...)`
//    static func sfuiDisplayLight(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiDisplayLight, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIDisplay-Medium", size: ...)`
//    static func sfuiDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiDisplayMedium, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIDisplay-Regular", size: ...)`
//    static func sfuiDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiDisplayRegular, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIDisplay-Semibold", size: ...)`
//    static func sfuiDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiDisplaySemibold, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIDisplay-Thin", size: ...)`
//    static func sfuiDisplayThin(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiDisplayThin, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIText-Bold", size: ...)`
//    static func sfuiTextBold(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiTextBold, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIText-Heavy", size: ...)`
//    static func sfuiTextHeavy(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiTextHeavy, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIText-Light", size: ...)`
//    static func sfuiTextLight(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiTextLight, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIText-Medium", size: ...)`
//    static func sfuiTextMedium(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiTextMedium, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIText-Regular", size: ...)`
//    static func sfuiTextRegular(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiTextRegular, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIText-Semibold", size: ...)`
//    static func sfuiTextSemibold(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiTextSemibold, size: size)
//    }
//    
//    /// `UIFont(name: "SFUIText-Ultrathin", size: ...)`
//    static func sfuiTextUltrathin(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: sfuiTextUltrathin, size: size)
//    }
//    
//    /// `UIFont(name: "VarelaRound-Regular", size: ...)`
//    static func varelaRoundRegular(size: CGFloat) -> UIKit.UIFont? {
//      return UIKit.UIFont(resource: varelaRoundRegular, size: size)
//    }
//    
//    static func validate() throws {
//      if R.font.sfuiDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Bold' could not be loaded, is 'SF-UI-Display-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Heavy' could not be loaded, is 'SF-UI-Display-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Light' could not be loaded, is 'SF-UI-Display-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Medium' could not be loaded, is 'SF-UI-Display-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Regular' could not be loaded, is 'SF-UI-Display-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Semibold' could not be loaded, is 'SF-UI-Display-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Thin' could not be loaded, is 'SF-UI-Display-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Bold' could not be loaded, is 'SF-UI-Text-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiTextHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Heavy' could not be loaded, is 'SF-UI-Text-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Light' could not be loaded, is 'SF-UI-Text-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Medium' could not be loaded, is 'SF-UI-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Regular' could not be loaded, is 'SF-UI-Text-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Semibold' could not be loaded, is 'SF-UI-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.sfuiTextUltrathin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Ultrathin' could not be loaded, is 'SF-UI-Text-Ultrathin.otf' added to the UIAppFonts array in this targets Info.plist?") }
//      if R.font.varelaRoundRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'VarelaRound-Regular' could not be loaded, is 'VarelaRound-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
//    }
//    
//    fileprivate init() {}
//  }
//  
//  /// This `R.image` struct is generated, and contains static references to 5 images.
//  struct image {
//    /// Image `arrow_left`.
//    static let arrow_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_left")
//    /// Image `arrow_right`.
//    static let arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right")
//    /// Image `main-logo`.
//    static let mainLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "main-logo")
//    /// Image `shop-image`.
//    static let shopImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop-image")
//    /// Image `sticker_placeholder`.
//    static let sticker_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "sticker_placeholder")
//    
//    /// `UIImage(named: "arrow_left", bundle: ..., traitCollection: ...)`
//    static func arrow_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
//      return UIKit.UIImage(resource: R.image.arrow_left, compatibleWith: traitCollection)
//    }
//    
//    /// `UIImage(named: "arrow_right", bundle: ..., traitCollection: ...)`
//    static func arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
//      return UIKit.UIImage(resource: R.image.arrow_right, compatibleWith: traitCollection)
//    }
//    
//    /// `UIImage(named: "main-logo", bundle: ..., traitCollection: ...)`
//    static func mainLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
//      return UIKit.UIImage(resource: R.image.mainLogo, compatibleWith: traitCollection)
//    }
//    
//    /// `UIImage(named: "shop-image", bundle: ..., traitCollection: ...)`
//    static func shopImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
//      return UIKit.UIImage(resource: R.image.shopImage, compatibleWith: traitCollection)
//    }
//    
//    /// `UIImage(named: "sticker_placeholder", bundle: ..., traitCollection: ...)`
//    static func sticker_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
//      return UIKit.UIImage(resource: R.image.sticker_placeholder, compatibleWith: traitCollection)
//    }
//    
//    fileprivate init() {}
//  }
//  
//  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
//  struct nib {
//    /// Nib `StickerLargeCell`.
//    static let stickerLargeCell = _R.nib._StickerLargeCell()
//    /// Nib `StikerPackHeader`.
//    static let stikerPackHeader = _R.nib._StikerPackHeader()
//    /// Nib `TabBarItemCell`.
//    static let tabBarItemCell = _R.nib._TabBarItemCell()
//    
//    /// `UINib(name: "StickerLargeCell", in: bundle)`
//    @available(*, deprecated, message: "Use UINib(resource: R.nib.stickerLargeCell) instead")
//    static func stickerLargeCell(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.stickerLargeCell)
//    }
//    
//    /// `UINib(name: "StikerPackHeader", in: bundle)`
//    @available(*, deprecated, message: "Use UINib(resource: R.nib.stikerPackHeader) instead")
//    static func stikerPackHeader(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.stikerPackHeader)
//    }
//    
//    /// `UINib(name: "TabBarItemCell", in: bundle)`
//    @available(*, deprecated, message: "Use UINib(resource: R.nib.tabBarItemCell) instead")
//    static func tabBarItemCell(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.tabBarItemCell)
//    }
//    
//    static func stickerLargeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StikerLargeCell? {
//      return R.nib.stickerLargeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StikerLargeCell
//    }
//    
//    static func stikerPackHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StickerPackHeader? {
//      return R.nib.stikerPackHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StickerPackHeader
//    }
//    
//    static func tabBarItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TabBarItemCell? {
//      return R.nib.tabBarItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TabBarItemCell
//    }
//    
//    fileprivate init() {}
//  }
//  
//  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
//  struct reuseIdentifier {
//    /// Reuse identifier `StickerPackHeader`.
//    static let stickerPackHeader: Rswift.ReuseIdentifier<StickerPackHeader> = Rswift.ReuseIdentifier(identifier: "StickerPackHeader")
//    /// Reuse identifier `StikerLargeCell`.
//    static let stikerLargeCell: Rswift.ReuseIdentifier<StikerLargeCell> = Rswift.ReuseIdentifier(identifier: "StikerLargeCell")
//    /// Reuse identifier `TabBarItemCell`.
//    static let tabBarItemCell: Rswift.ReuseIdentifier<TabBarItemCell> = Rswift.ReuseIdentifier(identifier: "TabBarItemCell")
//    
//    fileprivate init() {}
//  }
//  
//  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
//  struct storyboard {
//    /// Storyboard `MainInterface`.
//    static let mainInterface = _R.storyboard.mainInterface()
//    
//    /// `UIStoryboard(name: "MainInterface", bundle: ...)`
//    static func mainInterface(_: Void = ()) -> UIKit.UIStoryboard {
//      return UIKit.UIStoryboard(resource: R.storyboard.mainInterface)
//    }
//    
//    fileprivate init() {}
//  }
//  
//  fileprivate struct intern: Rswift.Validatable {
//    fileprivate static func validate() throws {
//      try _R.validate()
//    }
//    
//    fileprivate init() {}
//  }
//  
//  fileprivate class Class {}
//  
//  fileprivate init() {}
//}
//
//struct _R: Rswift.Validatable {
//  static func validate() throws {
//    try storyboard.validate()
//    try nib.validate()
//  }
//  
//  struct nib: Rswift.Validatable {
//    static func validate() throws {
//      try _StickerLargeCell.validate()
//      try _StikerPackHeader.validate()
//      try _TabBarItemCell.validate()
//    }
//    
//    struct _StickerLargeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
//      typealias ReusableType = StikerLargeCell
//      
//      let bundle = R.hostingBundle
//      let identifier = "StikerLargeCell"
//      let name = "StickerLargeCell"
//      
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StikerLargeCell? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StikerLargeCell
//      }
//      
//      static func validate() throws {
//        if UIKit.UIImage(named: "sticker_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sticker_placeholder' is used in nib 'StickerLargeCell', but couldn't be loaded.") }
//        if #available(iOS 11.0, *) {
//        }
//      }
//      
//      fileprivate init() {}
//    }
//    
//    struct _StikerPackHeader: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
//      typealias ReusableType = StickerPackHeader
//      
//      let bundle = R.hostingBundle
//      let identifier = "StickerPackHeader"
//      let name = "StikerPackHeader"
//      
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StickerPackHeader? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StickerPackHeader
//      }
//      
//      static func validate() throws {
//        if UIKit.UIImage(named: "main-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'main-logo' is used in nib 'StikerPackHeader', but couldn't be loaded.") }
//        if #available(iOS 11.0, *) {
//        }
//      }
//      
//      fileprivate init() {}
//    }
//    
//    struct _TabBarItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
//      typealias ReusableType = TabBarItemCell
//      
//      let bundle = R.hostingBundle
//      let identifier = "TabBarItemCell"
//      let name = "TabBarItemCell"
//      
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TabBarItemCell? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TabBarItemCell
//      }
//      
//      static func validate() throws {
//        if UIKit.UIImage(named: "shop-image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shop-image' is used in nib 'TabBarItemCell', but couldn't be loaded.") }
//        if #available(iOS 11.0, *) {
//        }
//      }
//      
//      fileprivate init() {}
//    }
//    
//    fileprivate init() {}
//  }
//  
//  struct storyboard: Rswift.Validatable {
//    static func validate() throws {
//      try mainInterface.validate()
//    }
//    
//    struct mainInterface: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
//      typealias InitialController = MessagesViewController
//      
//      let bundle = R.hostingBundle
//      let name = "MainInterface"
//      let stickerPackViewController = StoryboardViewControllerResource<StickerPackViewController>(identifier: "StickerPackViewController")
//      
//      func stickerPackViewController(_: Void = ()) -> StickerPackViewController? {
//        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stickerPackViewController)
//      }
//      
//      static func validate() throws {
//        if UIKit.UIImage(named: "arrow_left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_left' is used in storyboard 'MainInterface', but couldn't be loaded.") }
//        if UIKit.UIImage(named: "arrow_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_right' is used in storyboard 'MainInterface', but couldn't be loaded.") }
//        if #available(iOS 11.0, *) {
//        }
//        if _R.storyboard.mainInterface().stickerPackViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stickerPackViewController' could not be loaded from storyboard 'MainInterface' as 'StickerPackViewController'.") }
//      }
//      
//      fileprivate init() {}
//    }
//    
//    fileprivate init() {}
//  }
//  
//  fileprivate init() {}
//}
